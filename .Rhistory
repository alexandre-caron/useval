treedepth = mean(treedepth__),
n_leapfrog = mean(n_leapfrog__),
divergent = mean(divergent__),
energy = mean(energy__)
))
dm_nc
parameters <- tibble(
m_nc_max = m_nc_max,
m_c_max = m_c_max,
marginal_profit = marginal_profit
pop_size_user = pop_size_user,
pop_size_sell = pop_size_sell,
lifetime = lifetime,
fixed_cost = fixed_cost,
marginal_cost = marginal_cost,
cost_c = cost_c,
cost_nc = cost_nc,
seuil = seuil
)
parameters <- tibble(
m_nc_max = m_nc_max,
m_c_max = m_c_max,
marginal_profit = marginal_profit,
pop_size_user = pop_size_user,
pop_size_sell = pop_size_sell,
lifetime = lifetime,
fixed_cost = fixed_cost,
marginal_cost = marginal_cost,
cost_c = cost_c,
cost_nc = cost_nc,
seuil = seuil
)
parameters
parameters <- c(
m_nc_max = m_nc_max,
m_c_max = m_c_max,
marginal_profit = marginal_profit,
pop_size_user = pop_size_user,
pop_size_sell = pop_size_sell,
lifetime = lifetime,
fixed_cost = fixed_cost,
marginal_cost = marginal_cost,
cost_c = cost_c,
cost_nc = cost_nc,
seuil = seuil
)
parameters
tibble(parameters = names(parameters), value = parameters)
parameters <- c(
m_nc_max = m_nc_max,
m_c_max = m_c_max,
marginal_profit = marginal_profit,
pop_size_user = pop_size_user,
pop_size_sell = pop_size_sell,
lifetime = lifetime,
fixed_cost = fixed_cost,
marginal_cost = marginal_cost,
cost_c = cost_c,
cost_nc = cost_nc,
seuil = seuil
)
tibble(parameters = names(parameters), value = parameters)
parameters
param<- c(
m_nc_max = m_nc_max,
m_c_max = m_c_max,
marginal_profit = marginal_profit,
pop_size_user = pop_size_user,
pop_size_sell = pop_size_sell,
lifetime = lifetime,
fixed_cost = fixed_cost,
marginal_cost = marginal_cost,
cost_c = cost_c,
cost_nc = cost_nc,
seuil = seuil
)
tibble(parameters = names(param), value = param)
param <- c(
`Maximum m (non-critical)` = m_nc_max,
`Maximum m (critical)` = m_c_max,
marginal_profit = marginal_profit,
pop_size_user = pop_size_user,
pop_size_sell = pop_size_sell,
lifetime = lifetime,
fixed_cost = fixed_cost,
marginal_cost = marginal_cost,
cost_c = cost_c,
cost_nc = cost_nc,
seuil = seuil
)
tibble(parameters = names(param), value = param)
param <- c(
`Maximum m (non-critical)` = m_nc_max,
`Maximum m (critical)` = m_c_max,
`Marginal profit` = marginal_profit,
`Number of end-users` = pop_size_user,
`Number of buyers` = pop_size_sell,
`Lifetime` = lifetime,
`Fixed cost` = fixed_cost,
`Marginal cost (by device)` = marginal_cost,
cost_c = cost_c,
cost_nc = cost_nc,
seuil = seuil
)
tibble(parameters = names(param), value = param)
param <- c(
`Maximum m (non-critical)` = m_nc_max,
`Maximum m (critical)` = m_c_max,
`Marginal profit` = marginal_profit,
`Number of end-users` = pop_size_user,
`Number of buyers` = pop_size_sell,
`Lifetime` = lifetime,
`Fixed cost` = fixed_cost,
`Marginal cost (by device)` = marginal_cost,
`Cost of a non-critical problem` = cost_nc,
`Cost of a critical problem` = cost_c,
`Threshold for critical problem consequences` = seuil
)
tibble(parameters = names(param), value = param)
knitr::kable(tibble(Parameters = names(param), Value = param))
sample_size_grid
sample_size_step <- 5
sample_size_max <- 60
sample_size_grid <- seq(0, sample_size_max, sample_size_step)
marginal_profit <- 50*0.9
pop_size_user <- 2000
pop_size_sell <- 10000
lifetime <- 5
fixed_cost <- 30000
marginal_cost <- 800
cost_c <- 10^6
cost_nc <- marginal_profit
seuil <- 0
sample_size_step <- 5
sample_size_max <- 60
sample_size_grid <- seq(0, sample_size_max, sample_size_step)
param <- c(
`Maximum m (non-critical)` = m_nc_max,
`Maximum m (critical)` = m_c_max,
`Marginal profit` = marginal_profit,
`Number of end-users` = pop_size_user,
`Number of buyers` = pop_size_sell,
`Lifetime` = lifetime,
`Fixed cost` = fixed_cost,
`Marginal cost (by device)` = marginal_cost,
`Cost of a non-critical problem` = cost_nc,
`Cost of a critical problem` = cost_c,
`Threshold for critical problem consequences` = seuil,
`Step for sample size determination` = sample_size_step,
`Max for sample size determination` = sample_size_max
)
knitr::kable(tibble(Parameters = names(param), Value = param))
n_sim <- 100000
param <- c(
`Maximum m (non-critical)` = m_nc_max,
`Maximum m (critical)` = m_c_max,
`Marginal profit` = marginal_profit,
`Number of end-users` = pop_size_user,
`Number of buyers` = pop_size_sell,
`Lifetime` = lifetime,
`Fixed cost` = fixed_cost,
`Marginal cost (by device)` = marginal_cost,
`Cost of a non-critical problem` = cost_nc,
`Cost of a critical problem` = cost_c,
`Threshold for critical problem consequences` = seuil,
`Step for sample size determination` = sample_size_step,
`Max for sample size determination` = sample_size_max,
`Number of simulation for the preposterior analysis ` = n_sim
)
knitr::kable(tibble(Parameters = names(param), Value = param))
el
res_table
knitr::kable(res_table %>% mutate(max = ifelse(enbs == max(enbs),"**",""))
knitr::kable(res_table %>% mutate(max = ifelse(enbs == max(enbs),"**","")))
devtools::use_vignette("knit-child_analysis")
use_vignette("knit-child_analysis")
usethis::use_vignette("knit-child_analysis")
devtools::load_all(".")
devtools::load_all(".")
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(useval)
# Chunk 3: setup
library(tidyverse)
set.seed(1984)
# Chunk 4
dm <- naive_hf
(dm_nc <- model_parameters(dm))
dm0 <- ifelse(dm, FALSE, dm)
(dm_c <- model_parameters(dm0))
# Chunk 5
## Fit
m_nc_max <- 50
m_c_max <- 5
## Decision model
marginal_profit <- 50*0.9
pop_size_user <- 2000
pop_size_sell <- 10000
lifetime <- 5
fixed_cost <- 30000
marginal_cost <- 800
cost_c <- 10^6
cost_nc <- marginal_profit
seuil <- 0
sample_size_step <- 5
sample_size_max <- 60
sample_size_grid <- seq(0, sample_size_max, sample_size_step)
n_sim <- 100000
param <- c(
`Maximum m (non-critical)` = m_nc_max,
`Maximum m (critical)` = m_c_max,
`Marginal profit` = marginal_profit,
`Number of end-users` = pop_size_user,
`Number of buyers` = pop_size_sell,
`Lifetime` = lifetime,
`Fixed cost` = fixed_cost,
`Marginal cost (by device)` = marginal_cost,
`Cost of a non-critical problem` = cost_nc,
`Cost of a critical problem` = cost_c,
`Threshold for critical problem consequences` = seuil,
`Step for sample size determination` = sample_size_step,
`Max for sample size determination` = sample_size_max,
`Number of simulation for the preposterior analysis ` = n_sim
)
knitr::kable(tibble(Parameters = names(param), Value = param))
# Chunk 6
# Non-critical
fit_nc <- posterior_analysis(parameters = dm_nc, m_max = m_nc_max, iter = 50000,
seed = 1, control = list(adapt_delta = 0.95))
# Critical
fit_c <- posterior_analysis(parameters = dm_c, m_max = m_c_max, iter = 50000,
seed = 1, control = list(adapt_delta = 0.95))
# Chunk 7
knitr::kable(as_tibble(round(fit_nc$diagnostic, 3)) %>% group_by(m) %>% summarize(
acceptance = mean(accept_stat__),
stepsize = mean(stepsize__),
treedepth = mean(treedepth__),
n_leapfrog = mean(n_leapfrog__),
divergent = mean(divergent__),
energy = mean(energy__)
))
# Chunk 8
knitr::kable(as_tibble(round(fit_c$diagnostic, 3)) %>% group_by(m) %>% summarize(
acceptance = mean(accept_stat__),
stepsize = mean(stepsize__),
treedepth = mean(treedepth__),
n_leapfrog = mean(n_leapfrog__),
divergent = mean(divergent__),
energy = mean(energy__)
))
round(fit_c$diagnostic, 3)
# Chunk 9
p <- list()
p[[1]] <- res_prepost$pm %>% filter(m_nc >= dm_nc$j) %>% group_by(m_nc) %>%
summarize(Probability = sum(p)) %>%
ggplot(aes(x=m_nc, y=Probability, fill=Probability)) +
geom_bar(stat="identity") +
theme_minimal() +
theme(legend.position='none', panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_blank(),
axis.text = element_blank(), axis.title = element_blank()) +
scale_fill_gradient(low = "white",high = "darkred", na.value = "grey50",
space = "Lab", guide = "colourbar", aesthetics = "fill")
p[[2]] <- res_prepost$pm %>%
filter(m_nc >= dm_nc$j) %>%
ggplot() + geom_raster(aes(x = m_nc, y = m_c, fill = p)) +
theme_minimal() + scale_fill_distiller(direction = 1) + theme(legend.position='none') +
scale_y_continuous(minor_breaks = seq(0 , m_c_max, 1),breaks = seq(0 , m_c_max, 5)) +
scale_x_continuous(minor_breaks = seq(dm_nc$j , m_nc_max, 1),breaks = seq(dm_nc$j , m_nc_max, 5)) +
ylab("Number of critical problems") +  xlab("Number of non-critical problems") + scale_fill_gradient(
low = "white",
high = "darkred",
space = "Lab",
na.value = "grey50",
guide = "colourbar",
aesthetics = "fill"
)
p[[3]] <- res_prepost$pm %>% filter(m_nc >= dm_nc$j) %>% group_by(m_c) %>%
summarize(Probability = sum(p)) %>%
ggplot(aes(x=m_c, y=Probability, fill=Probability)) +
geom_bar(stat="identity") + coord_flip() +
theme_minimal() +
theme(legend.position='none', panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_blank(),
axis.text = element_blank(), axis.title = element_blank()) +
scale_fill_gradient(low = "white",high = "darkred", na.value = "grey50",
space = "Lab", guide = "colourbar", aesthetics = "fill")
ggpubr::ggarrange(p[[1]], ggplot()+theme_minimal(), p[[2]], p[[3]], widths = c(1,.2), heights = c(.5,1))
# Chunk 10
res_prepost <- prepost_analysis(fit_nc = fit_nc, fit_c = fit_c,
n_end_users = pop_size_sell,
sample_size = sample_size_grid, sim = n_sim)
# Chunk 11
y <- do.call(rbind, lapply(res_prepost$y, function(x){
x[,2] <- x[,2] > seuil
colMeans(x)
}))
# Chunk 12
el <- y %*% c(ok = 0, c = cost_c, nc = cost_nc)
## Same as
# el <- do.call(rbind, lapply(res_prepost$y, function(x){
#   x[,2] <- x[,2] > seuil
#   mean(x %*% c(ok = 0, c = cost_c, nc = cost_nc))
#   }))
prepost_analysis
joint_pm
pm <- joint_pm(pd_nc = fit_nc$integrated_likelihood,
pd_c = fit_c$integrated_likelihood)
p <- list()
p[[1]] <- pm %>% filter(m_nc >= dm_nc$j) %>% group_by(m_nc) %>%
summarize(Probability = sum(p)) %>%
ggplot(aes(x=m_nc, y=Probability, fill=Probability)) +
geom_bar(stat="identity") +
theme_minimal() +
theme(legend.position='none', panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_blank(),
axis.text = element_blank(), axis.title = element_blank()) +
scale_fill_gradient(low = "white",high = "darkred", na.value = "grey50",
space = "Lab", guide = "colourbar", aesthetics = "fill")
p[[2]] <- pm %>%
filter(m_nc >= dm_nc$j) %>%
ggplot() + geom_raster(aes(x = m_nc, y = m_c, fill = p)) +
theme_minimal() + scale_fill_distiller(direction = 1) +
theme(legend.position='none') +
scale_y_continuous(minor_breaks = seq(0 , m_c_max, 1),
breaks = seq(0 , m_c_max, 5)) +
scale_x_continuous(minor_breaks = seq(dm_nc$j , m_nc_max, 1),
breaks = seq(dm_nc$j , m_nc_max, 5)) +
ylab("Number of critical problems") +
xlab("Number of non-critical problems") +
scale_fill_gradient(low = "white", high = "darkred", na.value = "grey50",
space = "Lab", guide = "colourbar", aesthetics = "fill"
)
p[[3]] <- pm %>% filter(m_nc >= dm_nc$j) %>% group_by(m_c) %>%
summarize(Probability = sum(p)) %>%
ggplot(aes(x=m_c, y=Probability, fill=Probability)) +
geom_bar(stat="identity") + coord_flip() +
theme_minimal() +
theme(legend.position='none', panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_blank(),
axis.text = element_blank(), axis.title = element_blank()) +
scale_fill_gradient(low = "white",high = "darkred", na.value = "grey50",
space = "Lab", guide = "colourbar", aesthetics = "fill")
ggpubr::ggarrange(p[[1]], ggplot()+theme_minimal(), p[[2]], p[[3]],
widths = c(1,.2), heights = c(.5,1))
res_table <- tibble(n = sample_size_grid, el = el[,1]) %>%
mutate(evsi = el[1]-el) %>%
mutate(delta_evsi = evsi-lag(evsi)) %>%
mutate(costs = n*marginal_cost) %>%
mutate(delta_costs = costs - lag(costs, default = fixed_cost)) %>%
mutate(enbs = evsi - costs)
res_table %>% select(n,evsi,costs, enbs) %>%
gather(key = "measure", value = "value", -n) %>%
mutate(measure = recode(measure,
enbs ="Expected Net Benefit of Sampling (ENBS)",
evsi ="Expected Value of Sample Information (EVSI)",
costs ="Costs of Sampling")) %>%
ggplot() + aes(x = n, y = value, group = measure, color = measure) +
geom_line(size =1) +
scale_x_continuous(breaks = res_table$n) +
xlab("Sample size (n')") + ylab("thousand Euro (K€)") +
labs(color = "Value of Information measure: ") +
theme_bw() + theme(legend.position="bottom")
knitr::kable(res_table %>% mutate(max = ifelse(enbs == max(enbs),"**","")))
devtools::install()
library(useval)
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::install()
dm
naive_hf
donnees <- readxl::read_xlsx(path = "donnees/2020-01-20 Zeneo.xlsx")
set.seed(1987)
knit_with_parameters('C:/Users/alexa/Desktop/Examples.Rmd')
d <- donnees %>%
sample_n(100) %>%
select(-Country, -Population, -Fidelity) %>%
as.matrix()
donnees <- readRDS(file = "../donnees/data_usability.rds")$Savings
donnees
donnees %>%
as_tibble() %>%
as.matrix()
readRDS(file = "../donnees/data_usability.rds")$Savings>0
d_empty <- matrix(data = FALSE, nrow = 20, ncol = 0)
model_parameters(d_empty)
fit_model(parameters = model_parameters(d_empty), m = 0,
iter = 10000, seed = 1, control = list(adapt_delta = 0.95))
fit <- fit_model(parameters = model_parameters(d_empty), m = 1,
iter = 10000, seed = 1, control = list(adapt_delta = 0.95))
round(fit$diagnostic, 2)
integrated_likelihood(fit, seed = 1234)
ps <- posterior_sample(fit)
colMeans(ps)
hist(ps, breaks = 100)
ps <- posterior_pl(fit)
pl <- posterior_pl(fit)
colMeans(pl)
hist(pl, breaks = 100)
res <- posterior_grid(parameters = model_parameters(d_empty), m_max = 5,
iter = 10000, seed = 1, control = list(adapt_delta = 0.95))
res <- posterior_analysis(parameters = model_parameters(d_empty), m_max = 5,
iter = 10000, seed = 1, control = list(adapt_delta = 0.95))
res$integrated_likelihood
knitr::kable(as_tibble(round(fit$diagnostic, 3)) %>% group_by(m) %>%
summarize(
acceptance = mean(accept_stat__),
stepsize = mean(stepsize__),
treedepth = mean(treedepth__),
n_leapfrog = mean(n_leapfrog__),
divergent = mean(divergent__),
energy = mean(energy__)
))
library(tidyverse)
knitr::kable(as_tibble(round(fit$diagnostic, 3)) %>% group_by(m) %>%
summarize(
acceptance = mean(accept_stat__),
stepsize = mean(stepsize__),
treedepth = mean(treedepth__),
n_leapfrog = mean(n_leapfrog__),
divergent = mean(divergent__),
energy = mean(energy__)
))
res$integrated_likelihood
fit$diagnostic
knitr::kable(as_tibble(round(res$diagnostic, 3)) %>% group_by(m) %>%
summarize(
acceptance = mean(accept_stat__),
stepsize = mean(stepsize__),
treedepth = mean(treedepth__),
n_leapfrog = mean(n_leapfrog__),
divergent = mean(divergent__),
energy = mean(energy__)
))
res$integrated_likelihood
lapply(res$posterior_sample, function(x) {
if(!is.null(x)) colMeans(x)
})
lapply(res$posterior_pl, function(x) {
if(!is.null(x)) colMeans(x)
})
hist(ps, breaks = 100)
res <- lapply(seq(10,100,10),function(n){
d_empty <- matrix(data = FALSE, nrow = n, ncol = 0)
posterior_analysis(parameters = model_parameters(d_empty), m_max = 5,
iter = 10000, seed = 1, control = list(adapt_delta = 0.95))
})
lapply(res, function(x) {
x$diagnostic
})
lapply(res, function(x) {
knitr::kable(as_tibble(round(x$diagnostic, 3)) %>% group_by(m) %>%
summarize(
acceptance = mean(accept_stat__),
stepsize = mean(stepsize__),
treedepth = mean(treedepth__),
n_leapfrog = mean(n_leapfrog__),
divergent = mean(divergent__),
energy = mean(energy__)
))})
for(i in 1:10){
knitr::kable(as_tibble(round(res[i]$diagnostic, 3)) %>% group_by(m) %>%
summarize(
acceptance = mean(accept_stat__),
stepsize = mean(stepsize__),
treedepth = mean(treedepth__),
n_leapfrog = mean(n_leapfrog__),
divergent = mean(divergent__),
energy = mean(energy__)
))}
res[i]
res[[i]]
res[[i]]$diagnosti
for(i in 1:10){
knitr::kable(as_tibble(round(res[[i]]$diagnostic, 3)) %>% group_by(m) %>%
summarize(
acceptance = mean(accept_stat__),
stepsize = mean(stepsize__),
treedepth = mean(treedepth__),
n_leapfrog = mean(n_leapfrog__),
divergent = mean(divergent__),
energy = mean(energy__)
))}
for(i in 1:10){
print(knitr::kable(as_tibble(round(res[[i]]$diagnostic, 3)) %>% group_by(m) %>%
summarize(
acceptance = mean(accept_stat__),
stepsize = mean(stepsize__),
treedepth = mean(treedepth__),
n_leapfrog = mean(n_leapfrog__),
divergent = mean(divergent__),
energy = mean(energy__)
)))}
lapply(res, function(x) {
pm <- posterior_m(x$integrated_likelihood)
round(proba_m(pm),3)
})
joint_pm
d <- readRDS(file = "../donnees/data_usability.rds")$Savings
d
d <- readRDS(file = "../donnees/data_usability.rds")$Mantel
d
d <- readRDS(file = "../donnees/data_usability.rds")$Infpump
d
unlink('C:/Users/alexa/Desktop/Examples_cache', recursive = TRUE)
devtools::load_all(".")
