pkgbuild::compile_dll()
roxygen2::roxygenize()
devtools::load_all(".")
getLoadedDLLs()
pkgbuild::compile_dll()
pkgbuild::compile_dll(force = TRUE)
devtools::load_all(".")
load(file = "../reinstall/data/naive_hf.rda")
fit_model(d = naive_hf, m=36,
mu_prior_mean = 0, mu_prior_sd = 10000,
s2_prior_a = 0.5, s2_prior_b = 0.5,
iter = 10000)
pkgbuild::clean_dll()
pkgbuild::compile_dll(force = TRUE)
devtools::load_all(".")
fit_model(d = naive_hf, m=36,
mu_prior_mean = 0, mu_prior_sd = 10000,
s2_prior_a = 0.5, s2_prior_b = 0.5,
iter = 10000)
devtools::load_all(".")
pkgbuild::compile_dll(force = TRUE)
pkgbuild::compile_dll(force = TRUE)
pkgbuild::clean_dll()
pkgbuild::compile_dll(force = TRUE)
devtools::load_all(".")
fit_model(d = naive_hf, m=36,
mu_prior_mean = 0, mu_prior_sd = 10000,
s2_prior_a = 0.5, s2_prior_b = 0.5,
iter = 10000)
load("../reinstall/data/naive_hf.rda")
fit_model(d = naive_hf, m=36,
mu_prior_mean = 0, mu_prior_sd = 10000,
s2_prior_a = 0.5, s2_prior_b = 0.5,
iter = 10000)
bridgesampling::b
ridge_sampler(fit,silent = TRUE)$logml
fit_model(d = naive_hf, m=36,mu_prior_mean = 0, mu_prior_sd = 10000,s2_prior_a = 0.5, s2_prior_b = 0.5,iter = 10000)
fit <- fit_model(d = naive_hf, m=36,mu_prior_mean = 0, mu_prior_sd = 10000,s2_prior_a = 0.5, s2_prior_b = 0.5,iter = 10000)
fit
fit <- fit_model(d = naive_hf, m=36,mu_prior_mean = 0, mu_prior_sd = 10000,s2_prior_a = 0.5, s2_prior_b = 0.5,iter = 10000, seed = 1, adapt_delta +.95)
fit <- fit_model(d = naive_hf, m=36,mu_prior_mean = 0, mu_prior_sd = 10000,s2_prior_a = 0.5, s2_prior_b = 0.5,iter = 10000, seed = 1, adapt_delta = .95)
fit <- fit_model(d = naive_hf, m=36,mu_prior_mean = 0, mu_prior_sd = 10000,s2_prior_a = 0.5, s2_prior_b = 0.5,iter = 10000, seed = 1,  control = list(adapt_delta = 0.95))
fit
install.packages("shinystan", type = "source")
install.packages("shinystan")
library("shinystan")
launch_shinystan_demo()
shinystan::launch_shinystan(fit)
devtools::load_all(".")
fit <- fit_model(d = naive_hf, m=36,mu_prior_mean = 0, mu_prior_sd = 10000,s2_prior_a = 0.5, s2_prior_b = 0.5,iter = 10000, seed = 1,  control = list(adapt_delta = 0.95))
?use_data
devtools::load_all(".")
fit <- fit_model(d = naive_hf, m=36,mu_prior_mean = 0, mu_prior_sd = 10000,s2_prior_a = 0.5, s2_prior_b = 0.5,iter = 10000, seed = 1,  control = list(adapt_delta = 0.95))
integrated_likelihood(fit)
devtools::load_all(".")
pkgbuild::clean_dll()
pkgbuild::compile_dll(force = TRUE\)
pkgbuild::compile_dll(force = TRUE)
devtools::load_all(".")
fit <- fit_model(d = naive_hf, m=36,mu_prior_mean = 0, mu_prior_sd = 10000,s2_prior_a = 0.5, s2_prior_b = 0.5,iter = 10000, seed = 1,  control = list(adapt_delta = 0.95))
integrated_likelihood(fit)
fit <- fit_model(d = naive_hf, m=36,mu_prior_mean = 0, mu_prior_sd = 10000,s2_prior_a = 0.5, s2_prior_b = 0.5,iter = 10000, seed = 1,  control = list(adapt_delta = 0.95))
integrated_likelihood(fit)
post_sample <- lapply(1:length(fit@sim$samples),function(h){
simplify2array(fit@sim$samples[[h]][3:(k+2)])[(fit@sim$warmup + 1):fit@sim$iter,]
}) # list of n_chains matrices containing n_iter [warmup discarded] posterior sample simulations logit(p(p_1,...,p_m|m,d))
fit@sim$samples %>% str
str(fit@sim$samples)
str(fit@sim$samples[[1]])
startsWith(fit@sim$samples[[1]], "logit_p")
fit@sim$samples[[1]]
str(fit@sim$samples[[1]])
str(fit@sim$samples[[1]][-lp__])
str(fit@sim$samples[[1]][-"lp__"])
str(fit@sim$samples[[1]][-c("lp__")])
length(fit@sim$samples[[1]])
fit@sim$warmup
fit@sim$iter
lapply(fit@sim$samples, function(x) {
x[3:(length(x)-1)]
})
lapply(fit@sim$samples, function(x) {
simplify2array(x[3:(length(x)-1)])
})
sim_sample <- (fit@sim$warmup + 1):fit@sim$iter
lapply(fit@sim$samples, function(x) {
simplify2array(x[3:(length(x)-1)])[sim_sample,]
})
sample_size <- (fit@sim$warmup+1):fit@sim$iter
sample_list <- lapply(fit@sim$samples, function(x) {
simplify2array(x[3:(length(x)-1)])[sample_size,]
})
post_sample <- logitinv(do.call(rbind,sample_list))
logitinv <- function(x) 1/(1 + exp(-x))
post_sample <- logitinv(do.call(rbind,sample_list))
post_sample
substr(colnames(post_sample), 7, nchar(colnames(post_sample))) #
devtools::load_all(".")
logitinv <- function(x) {
1/(1 + exp(-x))
}
devtools::load_all(".")
fit <- fit_model(d = naive_hf, m=36,mu_prior_mean = 0, mu_prior_sd = 10000,s2_prior_a = 0.5, s2_prior_b = 0.5,iter = 10000, seed = 1,  control = list(adapt_delta = 0.95))
integrated_likelihood(fit)
head(posterior_sample(fit))
dc <- matrix(0,20,1) # empty matrix with one column
dc
dc <- matrix(FALSE,20,1) # empty matrix with one column
fit <- fit_model(d = dc, m=36,mu_prior_mean = 0, mu_prior_sd = 10000,s2_prior_a = 0.5, s2_prior_b = 0.5,iter = 10000, seed = 1,  control = list(adapt_delta = 0.95))
integrated_likelihood(stan_fit = fit, seed = 1)
fit <- fit_model(d = dc, m=36,mu_prior_mean = 0, mu_prior_sd = 10000,s2_prior_a = 0.5, s2_prior_b = 0.5,iter = 20000, seed = 1,  control = list(adapt_delta = 0.95))
fit <- fit_model(d = dc, m=36,mu_prior_mean = 0, mu_prior_sd = 10000,s2_prior_a = 0.5, s2_prior_b = 0.5,iter = 20000, seed = 1,  control = list(adapt_delta = 0.99, max_treedepth = 15)
fit <- fit_model(d = dc, m=36,mu_prior_mean = 0, mu_prior_sd = 1.5 ,s2_prior_a = 20, s2_prior_b = 20,iter = 20000, seed = 1,  control = list(adapt_delta = 0.95))
shinystan::launch_shinystan(fit)
fit <- fit_model(d = dc, m=1,mu_prior_mean = 0, mu_prior_sd = 1.5 ,s2_prior_a = 20, s2_prior_b = 20,iter = 20000, seed = 1,  control = list(adapt_delta = 0.95))
shinystan::launch_shinystan(fit)
fit <- fit_model(d = dc, m=1,mu_prior_mean = 0, mu_prior_sd = 1.5 ,s2_prior_a = 20, s2_prior_b = 20,iter = 50000, seed = 1,  control = list(adapt_delta = 0.95))
shinystan::launch_shinystan(fit)
rstan::stan_diag(fit\)
rstan::stan_diag(fit)
check_n_eff(fit)
rstan::check_n_eff(fit)
traceplot(fit,pars="mu")
fit <- fit_model(d = dc, m=0,mu_prior_mean = 0, mu_prior_sd = 1.5 ,s2_prior_a = 20, s2_prior_b = 20,iter = 50000, seed = 1,  control = list(adapt_delta = 0.95))
dc
dc <- matrix(FALSE,20,1) # empty matrix with one column
debug(fit_model)
fit <- fit_model(d = dc, m=1,mu_prior_mean = 0, mu_prior_sd = 1.5 ,s2_prior_a = 20, s2_prior_b = 20,iter = 50000, seed = 1,  control = list(adapt_delta = 0.95))
j
model_data
matrix(FALSE,20,0) # empty matrix with one column
matrix(FALSE,20,0) # empty matrix with one column
ncol(matrix(FALSE,20,0))
colSums(matrix(FALSE,20,0))
as.array(c(colSums(matrix(FALSE,20,0)),rep(0, 2)))
as.array(c(colSums(matrix(FALSE,20,0)),rep(0, 0)))
devtools::load_all(".")
dc
dc2 <- matrix(FALSE,20,0)
fit <- fit_model(d = dc2, m=0,mu_prior_mean = 0, mu_prior_sd = 1.5 ,s2_prior_a = 20, s2_prior_b = 20,iter = 50000, seed = 1,  control = list(adapt_delta = 0.95))
fit <- fit_model(d = dc, m=0,mu_prior_mean = 0, mu_prior_sd = 1.5 ,s2_prior_a = 20, s2_prior_b = 20,iter = 50000, seed = 1,  control = list(adapt_delta = 0.95))
fit <- fit_model(d = dc, m=1,mu_prior_mean = 0, mu_prior_sd = 1.5 ,s2_prior_a = 20, s2_prior_b = 20,iter = 50000, seed = 1,  control = list(adapt_delta = 0.95))
integrated_likelihood(fit)
fit <- fit_model(d = dc2, m=1,mu_prior_mean = 0, mu_prior_sd = 1.5 ,s2_prior_a = 20, s2_prior_b = 20,iter = 50000, seed = 1,  control = list(adapt_delta = 0.95))
integrated_likelihood(fit)
ncol(dc)
ncol(dc2)
colSums(dc2)
colSums(dc)
d <- dc
j <- ncol(d)
n <- nrow(d)
ms <- colSums(d)
x <- as.array(c(ms, rep(0, m - j)))
m <- 1
x <- as.array(c(ms, rep(0, m - j)))
x
d<-dc2
j <- ncol(d)
n <- nrow(d)
ms <- colSums(d)
x <- as.array(c(ms, rep(0, m - j)))
x
message("Columns ")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
